import math

def print_board(board):
    print("\n")
    print("-" * 13)
    for row in board:
        print(" | ".join(row))
        print("-" * 13)

def check_winner(board, player):
    for i in range(3):
        if all(cell == player for cell in board[i]):  # Row
            return True
        if all(board[j][i] == player for j in range(3)):  # Column
            return True

    if all(board[i][i] == player for i in range(3)):
        return True
    if all(board[i][2 - i] == player for i in range(3)):
        return True
    return False

def is_board_full(board):
    return all(cell != " " for row in board for cell in row)

def get_available_moves(board):
    return [(i, j) for i in range(3) for j in range(3) if board[i][j] == " "]

def minimax(board, depth, is_maximizing):
    if check_winner(board, "O"):
        return 1
    if check_winner(board, "X"):
        return -1
    if is_board_full(board):
        return 0

    if is_maximizing:
        best_score = -math.inf
        for (i, j) in get_available_moves(board):
            board[i][j] = "O"
            score = minimax(board, depth + 1, False)
            board[i][j] = " "
            best_score = max(score, best_score)
        return best_score
    else:
        best_score = math.inf
        for (i, j) in get_available_moves(board):
            board[i][j] = "X"
            score = minimax(board, depth + 1, True)
            board[i][j] = " "
            best_score = min(score, best_score)
        return best_score


def best_move(board):
    best_score = -math.inf
    move = None
    for (i, j) in get_available_moves(board):
        board[i][j] = "O"
        score = minimax(board, 0, False)
        board[i][j] = " "
        if score > best_score:
            best_score = score
            move = (i, j)
    return move

def play_game():
    board = [[" " for _ in range(3)] for _ in range(3)]
    human = "X"
    ai = "O"
    print("Welcome to Tic-Tac-Toe! You are X. AI is O.")

    while True:
        print_board(board)

        while True:
            try:
                row, col = map(int, input("Enter your move (row and column 0-2): ").split())
                if row not in range(3) or col not in range(3):
                    print("Invalid input. Enter values between 0 and 2.")
                    continue
                if board[row][col] != " ":
                    print("Cell already taken. Try again.")
                    continue
                board[row][col] = human
                break
            except ValueError:
                print("Invalid input. Please enter two integers.")

        if check_winner(board, human):
            print_board(board)
            print("Congratulations! You win!")
            break

        if is_board_full(board):
            print_board(board)
            print("It's a tie!")
            break

        print("AI is making a move...")
        i, j = best_move(board)
        board[i][j] = ai

        if check_winner(board, ai):
            print_board(board)
            print("AI wins! Better luck next time.")
            break

        if is_board_full(board):
            print_board(board)
            print("It's a tie!")
            break

if __name__ == "__main__":
    play_game()
